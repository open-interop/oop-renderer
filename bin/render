#!/usr/bin/env node
const fs = require("fs");
const path = require("path");

const getArgs = () => {
    const argv = [ ...process.argv ];
    const node = argv.shift();
    const me = argv.shift();

    if (argv.length < 2) {
        console.error(
            "Please provide an exmaple message and a render script.\n" +
            `Example usage: ${me} message.json script.js`
        );

        process.exit(1);
    }

    const f = (s, l) => (v => v === s || v === l);
    const mFlag = argv.findIndex(f("-m", "--message"));
    const sFlag = argv.findIndex(f("-s", "--script"));
    const lFlags = argv.reduce((acc, val, index) => {
        if (f("-l", "--layer")(val)) {
            return [ ...acc, index ];
        }

        return acc;
    }, []);


    if (mFlag > -1 || sFlag > -1 || lFlags.length) {
        if (!(mFlag > -1 && sFlag > -1)) {
            console.error(
                "Please provide an exmaple message and a render script.\n" +
                `Example usage: ${me} -m message.json -s script.js` + "\n" +
                `Example usage: ${me} --message message.json --script script.js`
            );

            process.exit(1);
        }

        const layers = [];
        if (lFlags.length) {
            lFlags.forEach(flag => {
                let index = flag + 1;
                while (index < argv.length && argv[index][0] !== "-") {
                    layers.push(argv[index]);
                    index += 1;
                }
            });
        }

        return { messageFile: argv[mFlag + 1], scriptFile: argv[sFlag + 1], layerFiles: layers };
    } else {
        return { messageFile: argv[0], scriptFile: argv[1], layerFiles: argv.slice(2) };
    }
};

const getFile = fileName => fs.readFileSync(fileName).toString("utf8");

const { messageFile, scriptFile, layerFiles } = getArgs();

const message = getFile(messageFile);
const script = getFile(scriptFile);
const layers = layerFiles.map((fileName, index) => {
    return {
        id: index,
        script: getFile(fileName),
        reference: path.parse(fileName).name,
    };
});

const main = require("../main");

const broker = {
    consume: (queue, callback) => {
        callback({
            content: {
                uuid: "00000000-0000-0000-0000-000000000000",
                tempr: {
                    id: 0,
                    template: {
                        language: "js",
                        script: script,
                        layers: layers.map((_, index) => index),
                    },
                },
                message: JSON.parse(message),
                layers: layers,
            }
        });
    },
    publish: (exchange, queue, message) => {
        const res = {
            rendered: message.tempr.rendered,
            console: message.tempr.console,
            error: message.tempr.error,
        };

        console.error(JSON.stringify(res));
    },
};

const nop = () => {};

main(broker, {}, { info: nop, warn: nop, error: nop });
